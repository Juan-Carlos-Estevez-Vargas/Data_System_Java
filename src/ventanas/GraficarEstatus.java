/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import java.sql.*;
import clases.Conexion;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author User
 */
public class GraficarEstatus extends javax.swing.JFrame {

    String user;
    int nuevo_ingreso, no_reparado, en_revision, reparado, entregado;

    String[] vector_estatus_nombre = new String[5];
    int[] vector_estatus_cantidad = new int[5];

    /**
     * Creates new form GraficarEstatus
     */
    public GraficarEstatus() {
        initComponents();
        user = Login.user;
        this.setSize(550, 460);
        this.setResizable(false);
        this.setTitle("Técnico - Sesión de " + user);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        //Añadimos la imagen de fondo al label, y la ajustamos al tamaño del label
        ImageIcon wallpaper = new ImageIcon("src/images/wallpaperPrincipal.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(jLabel_Wallpaper.getWidth(),
                jLabel_Wallpaper.getHeight(), Image.SCALE_DEFAULT));
        jLabel_Wallpaper.setIcon(icono); //Añadimos la imagen al label
        this.repaint(); //Nos aseguramos que la imagen se vea

        try {

            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT estatus, COUNT(estatus) AS Cantidad FROM equipos GROUP BY estatus");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {

                int posicion = 0;

                do {
                    vector_estatus_nombre[posicion] = rs.getString(1);
                    vector_estatus_cantidad[posicion] = rs.getInt(2);

                    if (vector_estatus_nombre[posicion].equalsIgnoreCase("En revision")) {
                        en_revision = vector_estatus_cantidad[posicion];
                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Entregado")) {
                        entregado = vector_estatus_cantidad[posicion];
                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("No reparado")) {
                        no_reparado = vector_estatus_cantidad[posicion];
                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Nuevo ingreso")) {
                        nuevo_ingreso = vector_estatus_cantidad[posicion];
                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Reparado")) {
                        reparado = vector_estatus_cantidad[posicion];
                    }

                    posicion++;

                } while (rs.next());

            }

        } catch (SQLException e) {
            System.err.println("Error en conectar con la base de datos " + e);
            JOptionPane.showMessageDialog(null, "¡¡Error!! Contacte al Administrador");
        }

        repaint();

    }

    //Metodo sobre escrito de la clase Image para personalizar el icono del frame
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_Footer = new javax.swing.JLabel();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gráfica de Estatus");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel_Footer.setText("Creado por Juan Carlos Estevez Vargas");
        getContentPane().add(jLabel_Footer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, -1, -1));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficarEstatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Footer;
    private javax.swing.JLabel jLabel_Wallpaper;
    // End of variables declaration//GEN-END:variables

    public int estatusMasRepetido(int NuevoIngreso, int NoReparado, int EnRevision, int Reparado, int Entregado) {

        //Validando estatus mas grande
        if (NuevoIngreso > NoReparado && NuevoIngreso > EnRevision && NuevoIngreso > Reparado && NuevoIngreso > Entregado) {
            return NuevoIngreso;
        } else if (NoReparado > EnRevision && NoReparado > Reparado && NoReparado > Entregado) {
            return NoReparado;
        } else if (EnRevision > Reparado && EnRevision > Entregado) {
            return EnRevision;
        } else if (Reparado > Entregado) {
            return Reparado;
        } else {
            return Entregado;
        }

    }

    //Graficando las barras
    @Override
    public void paint(Graphics g) {

        super.paint(g);
        int estatus_mas_repetido = estatusMasRepetido(nuevo_ingreso, no_reparado, en_revision, reparado, entregado);

        int largo_nuevo_ingreso = nuevo_ingreso * 400 / estatus_mas_repetido;
        int largo_no_reparado = no_reparado * 400 / estatus_mas_repetido;
        int largo_en_revision = en_revision * 400 / estatus_mas_repetido;
        int largo_reparado = reparado * 400 / estatus_mas_repetido;
        int largo_entragado = entregado * 400 / estatus_mas_repetido;

        //Pintando la gráfica de barras
        g.setColor(Color.yellow);
        g.fillRect(100, 100, largo_nuevo_ingreso, 40);
        g.drawString("Nuevo Ingreso", 10, 118);
        g.drawString("Cantidad " + nuevo_ingreso, 10, 133);
        
        g.setColor(Color.red);
        g.fillRect(100, 150, largo_no_reparado, 40);
        g.drawString("No Reparado", 10, 168);
        g.drawString("Cantidad " + no_reparado, 10, 183);
        
        g.setColor(Color.black);
        g.fillRect(100, 200, largo_en_revision, 40);
        g.drawString("En Revisión", 10, 218);
        g.drawString("Cantidad " + en_revision, 10, 233);
        
        g.setColor(Color.white);
        g.fillRect(100, 250, largo_reparado, 40);
        g.drawString("Reparado", 10, 268);
        g.drawString("Cantidad " + reparado, 10, 283);
        
        g.setColor(Color.green);
        g.fillRect(100, 300, largo_entragado, 40);
        g.drawString("Entregado", 10, 318);
        g.drawString("Cantidad " + entregado, 10, 333);
        

    }

}
